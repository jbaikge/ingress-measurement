package main

import (
	"testing"
)

func TestGenerator(t *testing.T) {
	tests := []struct {
		G   *Generator
		Exp []string
	}{
		{
			NewGenerator([]byte("moo"), 4),
			[]string{
				"mooX",
				"Xmoo",
			},
		},
		{
			NewGenerator([]byte("moo moo mr cow"), 19),
			[]string{
				"mooXmooXmrXcowXXXXX",
				"mooXmooXmrXXcowXXXX",
				"mooXmooXmrXXXcowXXX",
				"mooXmooXmrXXXXcowXX",
				"mooXmooXmrXXXXXcowX",
				"mooXmooXmrXXXXXXcow",
				"mooXmooXXmrXcowXXXX",
				"mooXmooXXmrXXcowXXX",
				"mooXmooXXmrXXXcowXX",
				"mooXmooXXmrXXXXcowX",
				"mooXmooXXmrXXXXXcow",
				"mooXmooXXXmrXcowXXX",
				"mooXmooXXXmrXXcowXX",
				"mooXmooXXXmrXXXcowX",
				"mooXmooXXXmrXXXXcow",
				"mooXmooXXXXmrXcowXX",
				"mooXmooXXXXmrXXcowX",
				"mooXmooXXXXmrXXXcow",
				"mooXmooXXXXXmrXcowX",
				"mooXmooXXXXXmrXXcow",
				"mooXmooXXXXXXmrXcow",
				"mooXXmooXmrXcowXXXX",
				"mooXXmooXmrXXcowXXX",
				"mooXXmooXmrXXXcowXX",
				"mooXXmooXmrXXXXcowX",
				"mooXXmooXmrXXXXXcow",
				"mooXXmooXXmrXcowXXX",
				"mooXXmooXXmrXXcowXX",
				"mooXXmooXXmrXXXcowX",
				"mooXXmooXXmrXXXXcow",
				"mooXXmooXXXmrXcowXX",
				"mooXXmooXXXmrXXcowX",
				"mooXXmooXXXmrXXXcow",
				"mooXXmooXXXXmrXcowX",
				"mooXXmooXXXXmrXXcow",
				"mooXXmooXXXXXmrXcow",
				"mooXXXmooXmrXcowXXX",
				"mooXXXmooXmrXXcowXX",
				"mooXXXmooXmrXXXcowX",
				"mooXXXmooXmrXXXXcow",
				"mooXXXmooXXmrXcowXX",
				"mooXXXmooXXmrXXcowX",
				"mooXXXmooXXmrXXXcow",
				"mooXXXmooXXXmrXcowX",
				"mooXXXmooXXXmrXXcow",
				"mooXXXmooXXXXmrXcow",
				"mooXXXXmooXmrXcowXX",
				"mooXXXXmooXmrXXcowX",
				"mooXXXXmooXmrXXXcow",
				"mooXXXXmooXXmrXcowX",
				"mooXXXXmooXXmrXXcow",
				"mooXXXXmooXXXmrXcow",
				"mooXXXXXmooXmrXcowX",
				"mooXXXXXmooXmrXXcow",
				"mooXXXXXmooXXmrXcow",
				"mooXXXXXXmooXmrXcow",
				"XmooXmooXmrXcowXXXX",
				"XmooXmooXmrXXcowXXX",
				"XmooXmooXmrXXXcowXX",
				"XmooXmooXmrXXXXcowX",
				"XmooXmooXmrXXXXXcow",
				"XmooXmooXXmrXcowXXX",
				"XmooXmooXXmrXXcowXX",
				"XmooXmooXXmrXXXcowX",
				"XmooXmooXXmrXXXXcow",
				"XmooXmooXXXmrXcowXX",
				"XmooXmooXXXmrXXcowX",
				"XmooXmooXXXmrXXXcow",
				"XmooXmooXXXXmrXcowX",
				"XmooXmooXXXXmrXXcow",
				"XmooXmooXXXXXmrXcow",
				"XmooXXmooXmrXcowXXX",
				"XmooXXmooXmrXXcowXX",
				"XmooXXmooXmrXXXcowX",
				"XmooXXmooXmrXXXXcow",
				"XmooXXmooXXmrXcowXX",
				"XmooXXmooXXmrXXcowX",
				"XmooXXmooXXmrXXXcow",
				"XmooXXmooXXXmrXcowX",
				"XmooXXmooXXXmrXXcow",
				"XmooXXmooXXXXmrXcow",
				"XmooXXXmooXmrXcowXX",
				"XmooXXXmooXmrXXcowX",
				"XmooXXXmooXmrXXXcow",
				"XmooXXXmooXXmrXcowX",
				"XmooXXXmooXXmrXXcow",
				"XmooXXXmooXXXmrXcow",
				"XmooXXXXmooXmrXcowX",
				"XmooXXXXmooXmrXXcow",
				"XmooXXXXmooXXmrXcow",
				"XmooXXXXXmooXmrXcow",
				"XXmooXmooXmrXcowXXX",
				"XXmooXmooXmrXXcowXX",
				"XXmooXmooXmrXXXcowX",
				"XXmooXmooXmrXXXXcow",
				"XXmooXmooXXmrXcowXX",
				"XXmooXmooXXmrXXcowX",
				"XXmooXmooXXmrXXXcow",
				"XXmooXmooXXXmrXcowX",
				"XXmooXmooXXXmrXXcow",
				"XXmooXmooXXXXmrXcow",
				"XXmooXXmooXmrXcowXX",
				"XXmooXXmooXmrXXcowX",
				"XXmooXXmooXmrXXXcow",
				"XXmooXXmooXXmrXcowX",
				"XXmooXXmooXXmrXXcow",
				"XXmooXXmooXXXmrXcow",
				"XXmooXXXmooXmrXcowX",
				"XXmooXXXmooXmrXXcow",
				"XXmooXXXmooXXmrXcow",
				"XXmooXXXXmooXmrXcow",
				"XXXmooXmooXmrXcowXX",
				"XXXmooXmooXmrXXcowX",
				"XXXmooXmooXmrXXXcow",
				"XXXmooXmooXXmrXcowX",
				"XXXmooXmooXXmrXXcow",
				"XXXmooXmooXXXmrXcow",
				"XXXmooXXmooXmrXcowX",
				"XXXmooXXmooXmrXXcow",
				"XXXmooXXmooXXmrXcow",
				"XXXmooXXXmooXmrXcow",
				"XXXXmooXmooXmrXcowX",
				"XXXXmooXmooXmrXXcow",
				"XXXXmooXmooXXmrXcow",
				"XXXXmooXXmooXmrXcow",
				"XXXXXmooXmooXmrXcow",
			},
		},
	}

	for _, test := range tests {
		for i, v := 0, test.G.Iter(); v != nil; i, v = i+1, test.G.Next() {
			if exp := test.Exp[i]; exp != string(v) {
				t.Errorf("Expected '%s'; Got '%s'", exp, v)
			}
		}
	}
}
